@prefix ex:   <http://example.org/> .
@prefix as:   <https://www.w3.org/ns/activitystreams#> .
@prefix rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix pol:  <https://www.example.org/ns/policy#> .
@prefix fno:  <https://w3id.org/function/ontology#> .
@prefix list: <http://www.w3.org/2000/10/swap/list#> .
@prefix log:  <http://www.w3.org/2000/10/swap/log#> .
@prefix sh:   <http://www.w3.org/ns/shacl#> .

{
  # pol:mainSubject defines the top level identifier of the notification
  [ pol:mainSubject ?id ] .
  
  ?id a ?class .
  ?class list:in (as:Announce as:Create) .

  (ex:Demo1 ex:Demo2 ex:Demo3) list:member ?policyId .

  ?policyId log:uri ?policyString .
}
=>
{
  # Encapsulate the policies in an empty rule to force generating only
  # on blank node for every binding in the premise.
  #
  # An alternative strategy is to ground all blank nodes as in:
  #   :MyPolicy1 pol:policy :MyPolicy1Execution .
  #   :MyPolicy1Execution 
  #        a fno:Execution ;
  #        fno:executes ex:demoPlugin ;
  #        ex:param1 "Hello Word!" .
  {} => {
    ?policyId pol:policy [
        a fno:Execution ;
        fno:executes ex:demoPlugin ;
        ex:param1 ?policyString 
    ] .
  } .

  {} => {
    ex:DemoLast pol:policy [ 
        a fno:Execution ;
        # Add an experimental sh:order hint so that this policy is executed last
        # The default sh:order = 1
        sh:order 1000;
        fno:executes ex:demoPlugin ;
        ex:param1 "Last Demo!" ;
    ] .
  } .
}.
